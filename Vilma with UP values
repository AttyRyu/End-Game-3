using System;
using System.Linq;
using cAlgo.API;
using cAlgo.API.Indicators;
using cAlgo.API.Internals;
using cAlgo.Indicators;
using System.Collections;
using System.IO;

namespace cAlgo.Robots
{
    [Robot(TimeZone = TimeZones.SingaporeStandardTime, AccessRights = AccessRights.FullAccess)]
    public class BlueMethDemoExpiration : Robot
    {
        //key zone indicator parameters
        [Parameter("Periods", DefaultValue = 1000)]
        public int Periods { get; set; }

        [Parameter("Show Extreme H/L", DefaultValue = true)]
        public bool ShowExtremeHL { get; set; }

        [Parameter("Show Day H/L", DefaultValue = true)]
        public bool ShowDayHL { get; set; }

        [Parameter("Required Hits", DefaultValue = 1)]
        public int RequiredHits { get; set; }

        [Parameter("Zone Size", DefaultValue = 33)]
        public int ZoneSize { get; set; }

        [Parameter("Max Lines In Zone", DefaultValue = 1)]
        public int MaxLinesInZone { get; set; }

        [Parameter("File_Path", DefaultValue = "C:/UP/")]
        public string File_Path { get; set; }

        [Parameter("ATR Periods", DefaultValue = 60)]
        public int ATRPeriods { get; set; }

        [Parameter("Up Range, +/- range to increase key zone, best if >= LimitRange", DefaultValue = 4)]
        public double UpRange { get; set; }

        private SRAtPrice SRAt;
        //end of key zone indicator parameters

        //risk management
        [Parameter("Volume", DefaultValue = 1000)]
        public int Volume { get; set; }

        [Parameter("Net Loss Close, Set Super High to Make this a Non-Factor", DefaultValue = -200)]
        public int NetLossClose { get; set; }

        [Parameter("Net Profit Close, Usually Half of Net Loss Close, Set Super High to Make this a Non-Factor", DefaultValue = 100)]
        public int NetProfitClose { get; set; }
        //end of risk management

        [Parameter("Limit Range, if Spread Higher than This then Trade does not execute", DefaultValue = 2)]
        public double LimitRange { get; set; }

        [Parameter("Wave Allowance, Set Super High to Make Waves a Non-Factor", DefaultValue = 3)]
        public double WaveAllowance { get; set; }

        //retracement parameters, for ranging markets
        [Parameter("Retracement = Value Multiplied by LimitRange, set to +100 to disable", DefaultValue = -1.5)]
        public double RefreshPipsMultiplier { get; set; }

        //nuke parameters
        [Parameter("Nuke TP Add Pips, Add pips for Nuked Position after Nuke TP Volume Multiplier", DefaultValue = 3)]
        public double NukeTP { get; set; }

        [Parameter("Nuke TP Multiplier, Multiplied with ATRH4. The Higher the more geared towards buying dips selling rallies, set to 0 to disable", DefaultValue = 1)]
        public double NukeTPMultiplier { get; set; }

        [Parameter("Backup Nuke TP Pips Multiplier, Multiplied with ATRh12. Set to 100 to disable", DefaultValue = 2)]
        public double BackupNukeMultiplier { get; set; }

        [Parameter("Max Volume Multiplier, max quantity price can be set to limit nuking ability, set to a high amount to disable", DefaultValue = 30000)]
        public int MaxVolumeMultiplier { get; set; }

        [Parameter("Final Nuke TP Add Pips", DefaultValue = 0)]
        public double FinalNukeTP { get; set; }
        //end of nuke parameters

        //range nuke parameters
        [Parameter("Range Nuke TP Add Pips, Add pips for Nuked Position after Nuke TP Volume Multiplier", DefaultValue = 3)]
        public double RangeNukeTP { get; set; }

        [Parameter("Range Nuke TP Multiplier, Multiplied with ATRH4. The Higher the more geared towards buying dips selling rallies, set to 0 to disable", DefaultValue = 1)]
        public double RangeNukeTPMultiplier { get; set; }
        //end of range nuke parameters

        //trend reversal parameters
        [Parameter("Trend Reverse Nuke TP Add Pips, Add pips to TP of nuked position when price goes below SMA changing our bias", DefaultValue = 2)]
        public double ReverseNukeTP { get; set; }

        [Parameter("Trend Reverse Nuke TP Volume Multiplier, Multiplied with ATRH4. Set the same with Nuke TP Volume Multiplier to disable", DefaultValue = 0)]
        public double ReverseNukeTPMultiplier { get; set; }
        //end of trend reversal parameters

        //trend and reversal filter parameters
        [Parameter("SMA Periods for d1", DefaultValue = 10)]
        public int SMAPeriods { get; set; }

        [Parameter("Standard Deviations Limit for smad1, different values per pair upon observation", DefaultValue = 2)]
        public double StandardDeviationLimit { get; set; }

        [Parameter("ADX Trend Filter d1, set to 0 to disable", DefaultValue = 25)]
        public double ADXTrendFilter { get; set; }

        [Parameter("ADX RangeLimit d1, set to 100 to disable", DefaultValue = 20)]
        public double ADXRangeLimit { get; set; }

        [Parameter("ADX Exhaustion Threshold h1, set to 100 to disable", DefaultValue = 45)]
        public double ADXExhaustionThreshold { get; set; }

        [Parameter("RSI Upper Limit m15, no sell nuking beyond this point, set to 100 to disable", DefaultValue = 80)]
        public double RSIUpperLimit { get; set; }

        [Parameter("RSI Lower Limit m15, no buy nuking beyond this point, set to 0 to disable", DefaultValue = 20)]
        public double RSILowerLimit { get; set; }
        //end of trend and reversal filter parameters

        //Market series declarations
        private MarketSeries m15;
        private MarketSeries h1;
        private MarketSeries h4;
        private MarketSeries h12;
        private MarketSeries d1;
        private MarketSeries w1;
        private MarketSeries m1;
        //end of Market series declarations

        //ATR, SMA, STDEV, RSI and ADX Declarations
        private StandardDeviation stdevh1;
        private StandardDeviation stdevh4;
        private StandardDeviation stdevd1;
        private MovingAverage openfastMah1;
        private MovingAverage openfastMah4;
        private MovingAverage openfastMad1;
        private MovingAverage closefastMah1;
        private MovingAverage closefastMah4;
        private MovingAverage closefastMad1;
        private DirectionalMovementSystem dmsm15;
        private DirectionalMovementSystem dmsh1;
        private DirectionalMovementSystem dmsh4;
        private DirectionalMovementSystem dmsd1;
        private AverageTrueRange ATRm15;
        private AverageTrueRange ATRh1;
        private AverageTrueRange ATRh4;
        private AverageTrueRange ATRh12;
        private AverageTrueRange ATRd1;
        private AverageTrueRange ATRw1;
        private AverageTrueRange ATRm1;
        private RelativeStrengthIndex rsim15;
        private RelativeStrengthIndex rsih1;
        //end of ATR, SMA, STDEV, RSI and ADX Declarations

        //expiration code
        bool timeprotected = true;
        // if true ;Expiry YEAR MM DD
        DateTime expirytime = new DateTime(2019, 8, 31);
        //end of expiration code

        //trend reversal
        bool _buytrendreversal;
        bool _buyconditionmet;
        bool _selltrendreversal;
        bool _sellconditionmet;
        bool _finalnukebuyvolume;
        bool _finalnukebuyconditionmet;
        bool _finalnukesellvolume;
        bool _finalnukesellconditionmet;
        //end of trend reversal

        protected override void OnStart()
        {
            //demo only code
            if (Account.IsLive)
            {
                Print(Server.Time + " This is a live account, AI Maru Intraday cannot run here. For the live version, please contact ryanoia@gmail.com");
                Stop();
            }
            else
            {
                Print(Server.Time + " This is a demo account and AI Maru Intraday is running. For the live version, please contact ryanoia@gmail.com");
            }
            //end of demo only code

            //Timeframes
            m15 = MarketData.GetSeries(TimeFrame.Minute15);
            h1 = MarketData.GetSeries(TimeFrame.Hour);
            h4 = MarketData.GetSeries(TimeFrame.Hour4);
            h12 = MarketData.GetSeries(TimeFrame.Hour12);
            d1 = MarketData.GetSeries(TimeFrame.Daily);
            w1 = MarketData.GetSeries(TimeFrame.Weekly);
            m1 = MarketData.GetSeries(TimeFrame.Monthly);
            //end of Timeframes

            //Trend
            stdevh1 = Indicators.StandardDeviation(h1.Close, SMAPeriods, MovingAverageType.Simple);
            stdevh4 = Indicators.StandardDeviation(h4.Close, SMAPeriods, MovingAverageType.Simple);
            stdevd1 = Indicators.StandardDeviation(d1.Close, SMAPeriods, MovingAverageType.Simple);
            closefastMah1 = Indicators.SimpleMovingAverage(h1.Close, SMAPeriods);
            closefastMah4 = Indicators.SimpleMovingAverage(h4.Close, SMAPeriods);
            closefastMad1 = Indicators.SimpleMovingAverage(d1.Close, SMAPeriods);
            openfastMah1 = Indicators.SimpleMovingAverage(h1.Open, SMAPeriods);
            openfastMah4 = Indicators.SimpleMovingAverage(h4.Open, SMAPeriods);
            openfastMad1 = Indicators.SimpleMovingAverage(d1.Open, SMAPeriods);
            ///End of Trend

            //ADX
            dmsm15 = Indicators.DirectionalMovementSystem(m15, 10);
            dmsh1 = Indicators.DirectionalMovementSystem(h1, 10);
            dmsh4 = Indicators.DirectionalMovementSystem(h4, 10);
            dmsd1 = Indicators.DirectionalMovementSystem(d1, 10);
            //end of ADX

            //ATR
            ATRm15 = Indicators.AverageTrueRange(m15, 120, MovingAverageType.Exponential);
            ATRh1 = Indicators.AverageTrueRange(h1, 120, MovingAverageType.Exponential);
            ATRh4 = Indicators.AverageTrueRange(h4, 60, MovingAverageType.Exponential);
            ATRh12 = Indicators.AverageTrueRange(h12, 60, MovingAverageType.Exponential);
            ATRd1 = Indicators.AverageTrueRange(d1, 30, MovingAverageType.Exponential);
            ATRw1 = Indicators.AverageTrueRange(w1, 12, MovingAverageType.Exponential);
            ATRm1 = Indicators.AverageTrueRange(m1, 3, MovingAverageType.Exponential);
            //end of ATR

            //RSI
            rsim15 = Indicators.RelativeStrengthIndex(m15.Close, 14);
            rsih1 = Indicators.RelativeStrengthIndex(h1.Close, 14);
            //end of RSI 

            //key zone initialization
            SRAt = Indicators.GetIndicator<SRAtPrice>(Periods, ShowExtremeHL, ShowDayHL, RequiredHits, ZoneSize, MaxLinesInZone, File_Path, ATRPeriods);
            //end of key zone initialization
        }
        protected override void OnBar()
        {
        }
        protected override void OnTick()
        {
            //variables
            var price = (Symbol.Bid + Symbol.Ask) / 2;
            var currentFastMa = openfastMad1.Result.Last(0);
            var previousFastMa = closefastMad1.Result.Last(1);
            var stdevlimit = stdevd1.Result.LastValue;
            var adxnukelimiter = dmsm15.ADX.LastValue;
            var adxexhaustion = dmsh1.ADX.LastValue;
            var dmsplus = dmsd1.DIPlus.LastValue;
            var dmsminus = dmsd1.DIMinus.LastValue;
            var adxtrendfilter = dmsd1.ADX.LastValue;
            var sldistance = ATRw1.Result.LastValue / Symbol.PipSize * 10;
            var tpdistance = ATRh1.Result.LastValue / Symbol.PipSize;
            var rawtpdistance = ATRh1.Result.LastValue;
            var rawsldistance = ATRw1.Result.LastValue * 10;
            var nuketpdistance = ATRh4.Result.LastValue / Symbol.PipSize;
            var rawnuketpdistance = ATRh4.Result.LastValue;
            var nukedistance = ATRh12.Result.LastValue / Symbol.PipSize;
            var nukespike = rsim15.Result.LastValue;
            var spread = Symbol.Spread / Symbol.PipSize;
            var hour = Server.Time.Hour;
            //end of variables

            //expiration code
            if (timeprotected == true && DateTime.Compare(Server.Time.Date, expirytime) >= 1)
            {
                Print(" AI Maru expired! Please contact ryanoia@gmail.com");
                Stop();
            }
            else
            {
                ////trend entry rules
                //above sma and not stretched, buy otherwise sell
                if ((price > currentFastMa) && (stdevlimit < StandardDeviationLimit) && (adxtrendfilter > ADXTrendFilter) && (dmsplus > dmsminus) && (dmsplus > ADXTrendFilter) && (adxexhaustion < ADXExhaustionThreshold) && (Positions.Find("", SymbolName, TradeType.Buy) == null) && (Positions.Find("Wave 0", SymbolName, TradeType.Buy) == null) && (spread < LimitRange) && (hour != 4) && (hour != 5) && (hour != 6) && (hour != 7))
                {
                    ExecuteMarketOrder(TradeType.Buy, Symbol, Volume, "Wave 0", sldistance, tpdistance, LimitRange);
                    Print("Refresh Buy");
                }
                else if ((price > currentFastMa) && (stdevlimit > StandardDeviationLimit) && (adxtrendfilter > ADXTrendFilter) && (dmsplus > dmsminus) && (dmsplus > ADXTrendFilter) && (adxexhaustion >= ADXExhaustionThreshold) && (Positions.Find("Stretched", SymbolName, TradeType.Sell) == null) && (Positions.Find("Wave 0 Stretched", SymbolName, TradeType.Sell) == null) && (spread < LimitRange) && (hour != 4) && (hour != 5) && (hour != 6) && (hour != 7))
                {
                    ExecuteMarketOrder(TradeType.Sell, Symbol, Volume, "Wave 0 Stretched", sldistance, tpdistance, LimitRange);
                    Print("Refresh Sell, Stretched");
                }
                //end of above sma and not stretched, buy otherwise sell

                //below sma and not stretched, sell otherwise buy
                if ((price < currentFastMa) && (stdevlimit < StandardDeviationLimit) && (adxtrendfilter > ADXTrendFilter) && (dmsminus > dmsplus) && (dmsminus > ADXTrendFilter) && (adxexhaustion < ADXExhaustionThreshold) && (Positions.Find("", SymbolName, TradeType.Sell) == null) && (Positions.Find("Wave 0", SymbolName, TradeType.Sell) == null) && (spread < LimitRange) && (hour != 4) && (hour != 5) && (hour != 6) && (hour != 7))
                {
                    ExecuteMarketOrder(TradeType.Sell, Symbol, Volume, "Wave 0", sldistance, tpdistance, LimitRange);
                    Print("Refresh Sell");
                }
                else if ((price < currentFastMa) && (stdevlimit > StandardDeviationLimit) && (adxtrendfilter > ADXTrendFilter) && (dmsminus > dmsplus) && (dmsminus > ADXTrendFilter) && (adxexhaustion >= ADXExhaustionThreshold) && (Positions.Find("Stretched", SymbolName, TradeType.Buy) == null) && (Positions.Find("Wave 0 Stretched", SymbolName, TradeType.Buy) == null) && (spread < LimitRange) && (hour != 4) && (hour != 5) && (hour != 6) && (hour != 7))
                {
                    ExecuteMarketOrder(TradeType.Buy, Symbol, Volume, "Wave 0 Stretched", sldistance, tpdistance, LimitRange);
                    Print("Refresh Buy, Stretched");
                }
                //end of below sma and not stretched, sell otherwise buy
                ////end of trend entry rules

                //////range entry rules
                //range initial entry rules
                if ((adxtrendfilter < ADXRangeLimit) && (Positions.Find("Range", SymbolName, TradeType.Buy) == null) && (Positions.Find("Wave 0 Range", SymbolName, TradeType.Buy) == null) && (Positions.Find("Range", SymbolName, TradeType.Sell) == null) && (Positions.Find("Wave 0 Range", SymbolName, TradeType.Sell) == null) && (spread < LimitRange) && (hour != 4) && (hour != 5) && (hour != 6) && (hour != 7))
                {
                    CancelPendingOrders();
                    ExecuteMarketOrder(TradeType.Buy, Symbol, Volume, "Wave 0 Range", sldistance, tpdistance, LimitRange);
                    ExecuteMarketOrder(TradeType.Sell, Symbol, Volume, "Wave 0 Range", sldistance, tpdistance, LimitRange);
                    CreateRangeWaves(TradeType.Buy);
                    CreateRangeWaves(TradeType.Sell);
                    Print("Refresh Everything, Range");
                }
                //range initial entry rules

                //Modify Sell Side for Trailing Stop
                if ((Positions.Find("Range", SymbolName, TradeType.Buy) == null) && (Positions.Find("Wave 0 Range", SymbolName, TradeType.Buy) == null) && (spread < LimitRange))
                {
                    foreach (var position in Positions)
                    {
                        if ((position.Label != "") && (position.Label != "Wave 0") && (position.Label != "Stretched") && (position.Label != "Wave 0 Stretched") && (position.TradeType == TradeType.Sell) && (position.Pips * -1 > tpdistance) && (position.Pips * -1 < nuketpdistance) && (position.HasTrailingStop == false) && (position.SymbolName == Symbol.Name))
                        {
                            ModifyPosition(position, position.EntryPrice + rawsldistance, position.EntryPrice - rawtpdistance, true);
                            Print("Range Position " + position.TradeType + " Trailing Stop Modification? " + position.HasTrailingStop);
                        }
                    }
                }
                //end of Modify Sell Side for Trailing Stop

                //Modify Buy Side for Trailing Stop
                if ((Positions.Find("Range", SymbolName, TradeType.Sell) == null) && (Positions.Find("Wave 0 Range", SymbolName, TradeType.Sell) == null) && (spread < LimitRange))
                {
                    foreach (var position in Positions)
                    {
                        if ((position.Label != "") && (position.Label != "Wave 0") && (position.Label != "Stretched") && (position.Label != "Wave 0 Stretched") && (position.TradeType == TradeType.Buy) && (position.Pips * -1 > tpdistance) && (position.Pips * -1 < nuketpdistance) && (position.HasTrailingStop == false) && (position.SymbolName == Symbol.Name))
                        {
                            ModifyPosition(position, position.EntryPrice - rawsldistance, position.EntryPrice + rawtpdistance, true);
                            Print("Range Position " + position.TradeType + " Trailing Stop Modification? " + position.HasTrailingStop);
                        }
                    }
                }
                //end of Modify Buy Side for Trailing Stop

                ////retracement refresh
                //buy side
                if ((Positions.Find("Range", SymbolName, TradeType.Buy) == null) && (Positions.Find("Wave 0 Range", SymbolName, TradeType.Buy) == null) && (spread < LimitRange))
                {
                    foreach (var position in Positions)
                    {
                        if ((position.Label != "") && (position.Label != "Wave 0") && (position.Label != "Stretched") && (position.Label != "Wave 0 Stretched") && (position.Pips != 0) && (position.Pips >= LimitRange * RefreshPipsMultiplier) && (position.SymbolName == Symbol.Name) && (position.TradeType == TradeType.Sell) && (position.HasTrailingStop == true))
                        {
                            CancelPendingBuyOrders();
                            ExecuteMarketOrder(TradeType.Buy, Symbol, Volume, "Wave 0 Range", sldistance, tpdistance, LimitRange);
                            CreateRangeWaves(TradeType.Buy);
                            Print("Refresh Range Buy Side");
                        }
                    }
                }
                //end of buy side

                //sell side
                if ((Positions.Find("Range", SymbolName, TradeType.Sell) == null) && (Positions.Find("Wave 0 Range", SymbolName, TradeType.Sell) == null) && (spread < LimitRange))
                {
                    foreach (var position in Positions)
                    {
                        if ((position.Label != "") && (position.Label != "Wave 0") && (position.Label != "Stretched") && (position.Label != "Wave 0 Stretched") && (position.Pips != 0) && (position.Pips >= LimitRange * RefreshPipsMultiplier) && (position.SymbolName == Symbol.Name) && (position.TradeType == TradeType.Buy) && (position.HasTrailingStop == true))
                        {
                            CancelPendingSellOrders();
                            ExecuteMarketOrder(TradeType.Sell, Symbol, Volume, "Wave 0 Range", sldistance, tpdistance, LimitRange);
                            CreateRangeWaves(TradeType.Sell);
                            Print("Refresh Range Sell Side");
                        }
                    }
                }
                //end of sell side
                ////end of retracement refresh
                //////range entry rules

                ////nuking logic
                double upmin;
                double upmax;
                double up;
                int counter = 0;
                string line;

                using (StreamReader sr = new StreamReader(File_Path + Symbol.Name + ".txt"))
                {
                    while ((line = sr.ReadLine()) != null)
                    {
                        upmin = 0;
                        upmax = 0;
                        up = 0;
                        up = Convert.ToDouble(line);
                        upmin = up - (UpRange * Symbol.PipSize);
                        upmax = up + (UpRange * Symbol.PipSize);
                        var nukerounderallowance = 0.5;
                        {
                            foreach (var position in Positions)
                            {

                                ////trend nuking rules
                                //buy nuke 
                                //volume modification 
                                if ((position.Pips <= nukedistance * -1) && (Symbol.Ask >= upmin && Symbol.Ask <= upmax) && (nukespike > RSILowerLimit) && (position.TradeType == TradeType.Buy) && (position.Label != "Range") && (position.Label != "Wave 0 Range") && (position.VolumeInUnits < MaxVolumeMultiplier) && (position.SymbolName == Symbol.Name) && (spread < LimitRange) && (hour != 4) && (hour != 5) && (hour != 6) && (hour != 7))
                                {
                                    ModifyPosition(position, position.VolumeInUnits * Math.Round((position.Pips * -1) / nuketpdistance + nukerounderallowance));
                                    ModifyPosition(position, position.EntryPrice - rawsldistance, position.EntryPrice + NukeTP * Symbol.PipSize + rawnuketpdistance * NukeTPMultiplier);
                                    Print("Price " + price + " Up Value = " + up + " New Volume " + position.VolumeInUnits + " Position " + position.TradeType);
                                }
                                //end of volume modification 
                                //end of buy nuke

                                //sell nuke
                                //volume modification 
                                if ((position.Pips <= nukedistance * -1) && (Symbol.Bid >= upmin && Symbol.Bid <= upmax) && (nukespike < RSIUpperLimit) && (position.TradeType == TradeType.Sell) && (position.Label != "Range") && (position.Label != "Wave 0 Range") && (position.VolumeInUnits < MaxVolumeMultiplier) && (position.SymbolName == Symbol.Name) && (spread < LimitRange) && (hour != 4) && (hour != 5) && (hour != 6) && (hour != 7))
                                {
                                    ModifyPosition(position, position.VolumeInUnits * Math.Round((position.Pips * -1) / nuketpdistance + nukerounderallowance));
                                    ModifyPosition(position, position.EntryPrice + rawsldistance, position.EntryPrice - NukeTP * Symbol.PipSize - rawnuketpdistance * NukeTPMultiplier);
                                    Print("Price " + price + " Up Value = " + up + " New Volume " + position.VolumeInUnits + " Position " + position.TradeType);
                                }
                                //end of volume modification 
                                //end of sell nuke
                                ////end of trend nuking rules

                                ////ranging nuking logic
                                //buy nuke 
                                //volume modification 
                                if ((position.Pips <= nukedistance * -1) && (Symbol.Ask >= upmin && Symbol.Ask <= upmax) && (nukespike > RSILowerLimit) && (position.TradeType == TradeType.Buy) && (position.Label != "") && (position.Label != "Wave 0") && (position.Label != "Stretched") && (position.Label != "Wave 0 Stretched") && (position.VolumeInUnits < MaxVolumeMultiplier) && (position.SymbolName == Symbol.Name) && (spread < LimitRange) && (hour != 4) && (hour != 5) && (hour != 6) && (hour != 7))
                                {
                                    ModifyPosition(position, position.VolumeInUnits * Math.Round((position.Pips * -1) / nuketpdistance + nukerounderallowance));
                                    ModifyPosition(position, position.EntryPrice - rawsldistance, position.EntryPrice + RangeNukeTP * Symbol.PipSize + rawnuketpdistance * RangeNukeTPMultiplier);
                                    Print("Price " + price + " Up Value = " + up + " New Volume " + position.VolumeInUnits + " Position " + position.TradeType);
                                }
                                //end of volume modification 
                                //end of buy nuke

                                //sell nuke
                                //volume modification 
                                if ((position.Pips <= nukedistance * -1) && (Symbol.Bid >= upmin && Symbol.Bid <= upmax) && (nukespike < RSIUpperLimit) && (position.TradeType == TradeType.Sell) && (position.Label != "") && (position.Label != "Wave 0") && (position.Label != "Stretched") && (position.Label != "Wave 0 Stretched") && (position.VolumeInUnits < MaxVolumeMultiplier) && (position.SymbolName == Symbol.Name) && (spread < LimitRange) && (hour != 4) && (hour != 5) && (hour != 6) && (hour != 7))
                                {
                                    ModifyPosition(position, position.VolumeInUnits * Math.Round((position.Pips * -1) / nuketpdistance + nukerounderallowance));
                                    ModifyPosition(position, position.EntryPrice + rawsldistance, position.EntryPrice - RangeNukeTP * Symbol.PipSize - rawnuketpdistance * RangeNukeTPMultiplier);
                                    Print("Price " + price + " Up Value = " + up + " New Volume " + position.VolumeInUnits + " Position " + position.TradeType);
                                }
                                //end of volume modification
                                //end of sell nuke
                                ////end of ranging nuking logic

                                ////trend reversal nuke modification
                                //buy
                                if ((price < previousFastMa) && (position.VolumeInUnits != Volume) && (position.VolumeInUnits < MaxVolumeMultiplier) && (position.TradeType == TradeType.Buy) && (position.SymbolName == Symbol.Name))
                                {
                                    _buyconditionmet = true;
                                }
                                if (!_buytrendreversal && _buyconditionmet)
                                {
                                    ModifyPosition(position, position.EntryPrice - rawsldistance, position.EntryPrice + ReverseNukeTP * Symbol.PipSize + rawnuketpdistance * ReverseNukeTPMultiplier);
                                    Print("Long Term Trend Reversed, new position take profit " + position.TakeProfit + " Volume " + position.VolumeInUnits + " Position " + position.TradeType);
                                    _buytrendreversal = true;
                                }
                                //end of buy

                                //sell
                                if ((price > previousFastMa) && (position.VolumeInUnits != Volume) && (position.VolumeInUnits < MaxVolumeMultiplier) && (position.TradeType == TradeType.Sell) && (position.SymbolName == Symbol.Name))
                                {
                                    _sellconditionmet = true;
                                }
                                if (!_selltrendreversal && _sellconditionmet)
                                {
                                    ModifyPosition(position, position.EntryPrice + rawsldistance, position.EntryPrice - ReverseNukeTP * Symbol.PipSize - rawnuketpdistance * ReverseNukeTPMultiplier);
                                    Print("Long Term Trend Reversed, new position take profit " + position.TakeProfit + " Volume " + position.VolumeInUnits + " Position " + position.TradeType);
                                    _selltrendreversal = true;
                                }
                                //end of sell
                                //end of trend reversal nuke modification

                                //final nuke logic for buy and sell, range or trend
                                //buy
                                if ((position.VolumeInUnits >= MaxVolumeMultiplier) && (position.TradeType == TradeType.Buy) && (position.SymbolName == Symbol.Name))
                                {
                                    _finalnukebuyconditionmet = true;
                                }
                                if (!_finalnukebuyvolume && _finalnukebuyconditionmet)
                                {
                                    ModifyPosition(position, position.EntryPrice - rawsldistance, position.EntryPrice + FinalNukeTP * Symbol.PipSize);
                                    Print("The Last Stand " + " New Volume " + position.VolumeInUnits + " Position " + position.TradeType);
                                    _finalnukebuyvolume = true;
                                }
                                //end of buy

                                //sell
                                if ((position.VolumeInUnits >= MaxVolumeMultiplier) && (position.TradeType == TradeType.Sell) && (position.SymbolName == Symbol.Name))
                                {
                                    _finalnukesellconditionmet = true;
                                }
                                if (!_finalnukesellvolume && _finalnukesellconditionmet)
                                {
                                    ModifyPosition(position, position.EntryPrice + rawsldistance, position.EntryPrice - FinalNukeTP * Symbol.PipSize);
                                    Print("The Last Stand " + " New Volume " + position.VolumeInUnits + " Position " + position.TradeType);
                                    _finalnukesellvolume = true;
                                }
                                //end of sell
                                //end of final nuke logic for buy and sell, range or trend
                            }
                        }
                    }
                }
                ////end of nuking logic

                //Risk Management
                if (Account.UnrealizedNetProfit >= NetProfitClose)
                {
                    Print(SymbolName + " Net Profit = " + Account.UnrealizedNetProfit);
                    foreach (var position in Positions)
                    {
                        if (position.SymbolName == Symbol.Name)
                        {
                            CancelPendingOrders();
                            ClosePositionAsync(position);
                        }
                    }
                }
                if (Account.UnrealizedNetProfit <= NetLossClose)
                {
                    Print(SymbolName + " Net Profit = " + Account.UnrealizedNetProfit);
                    foreach (var position in Positions)
                    {
                        if (position.SymbolName == Symbol.Name)
                        {
                            CancelPendingOrders();
                            ClosePositionAsync(position);
                        }
                    }
                }
                //end of Risk Management
            }
            //end of expiration code
        }

        //waves
        private void CreateWaves(TradeType type)
        {
            //variables
            var sldistance = Math.Round(ATRw1.Result.LastValue / Symbol.PipSize) * 10;
            var tpdistance = Math.Round(ATRh1.Result.LastValue / Symbol.PipSize);
            var rawtpdistance = ATRh1.Result.LastValue;
            var rawwaveallowance = WaveAllowance * Symbol.PipSize;
            var nukedistance = Math.Round(ATRh12.Result.LastValue / Symbol.PipSize);
            //end of variables

            double TargetPrice = type == TradeType.Buy ? Symbol.Ask : Symbol.Bid;
            for (int i = 0; i < Math.Round((nukedistance / (tpdistance + WaveAllowance)) / 2); i++)
            {
                TargetPrice = type == TradeType.Buy ? TargetPrice + (rawtpdistance + rawwaveallowance) : TargetPrice - (rawtpdistance + rawwaveallowance);
                PlaceStopLimitOrderAsync(type, Symbol, Volume, TargetPrice, LimitRange, "", sldistance, tpdistance, null);
            }
        }
        private void CreateStretchedWaves(TradeType type)
        {
            //variables
            var sldistance = Math.Round(ATRw1.Result.LastValue / Symbol.PipSize) * 10;
            var tpdistance = Math.Round(ATRh1.Result.LastValue / Symbol.PipSize);
            var rawtpdistance = ATRh1.Result.LastValue;
            var rawwaveallowance = WaveAllowance * Symbol.PipSize;
            var nukedistance = Math.Round(ATRh12.Result.LastValue / Symbol.PipSize);
            //end of variables

            double TargetPrice = type == TradeType.Buy ? Symbol.Ask : Symbol.Bid;
            for (int i = 0; i < Math.Round((nukedistance / (tpdistance + WaveAllowance)) / 2); i++)
            {
                TargetPrice = type == TradeType.Buy ? TargetPrice + (rawtpdistance + rawwaveallowance) : TargetPrice - (rawtpdistance + rawwaveallowance);
                PlaceStopLimitOrderAsync(type, Symbol, Volume, TargetPrice, LimitRange, "Stretched", sldistance, tpdistance, null);
            }
        }
        private void CreateRangeWaves(TradeType type)
        {
            //variables
            var sldistance = Math.Round(ATRw1.Result.LastValue / Symbol.PipSize) * 10;
            var tpdistance = Math.Round(ATRh1.Result.LastValue / Symbol.PipSize);
            var rawtpdistance = ATRh1.Result.LastValue;
            var rawwaveallowance = WaveAllowance * Symbol.PipSize;
            var nukedistance = Math.Round(ATRh12.Result.LastValue / Symbol.PipSize);
            //end of variables

            double TargetPrice = type == TradeType.Buy ? Symbol.Ask : Symbol.Bid;
            for (int i = 0; i < Math.Round((nukedistance / (tpdistance + WaveAllowance)) / 2); i++)
            {
                TargetPrice = type == TradeType.Buy ? TargetPrice + (rawtpdistance + rawwaveallowance) : TargetPrice - (rawtpdistance + rawwaveallowance);
                PlaceStopLimitOrderAsync(type, Symbol, Volume, TargetPrice, LimitRange, "Range", sldistance, tpdistance, null);
            }
        }
        //end of waves

        //Cancel Orders terms
        private void CancelPendingOrders()
        {
            foreach (var order in PendingOrders)
            {
                if (order.SymbolCode == Symbol.Name)
                {
                    CancelPendingOrderAsync(order);
                }
            }
        }
        private void CancelPendingBuyOrders()
        {
            foreach (var order in PendingOrders)
            {
                if ((order.SymbolCode == Symbol.Name) && (order.TradeType == TradeType.Buy))
                {
                    CancelPendingOrderAsync(order);
                }
            }
        }
        private void CancelPendingSellOrders()
        {
            foreach (var order in PendingOrders)
            {
                if ((order.SymbolCode == Symbol.Name) && (order.TradeType == TradeType.Sell))
                {
                    CancelPendingOrderAsync(order);
                }
            }
        }
        //end of Cancel Orders terms
    }
}
